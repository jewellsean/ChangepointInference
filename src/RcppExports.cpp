// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fpop_interface2
List fpop_interface2(NumericVector data, double penalty, double min_mean, double max_mean, NumericVector cost_mat_r, IntegerVector end_vec_r, NumericVector mean_vec_r, IntegerVector intervals_mat_r);
RcppExport SEXP _ChangepointInference_fpop_interface2(SEXP dataSEXP, SEXP penaltySEXP, SEXP min_meanSEXP, SEXP max_meanSEXP, SEXP cost_mat_rSEXP, SEXP end_vec_rSEXP, SEXP mean_vec_rSEXP, SEXP intervals_mat_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type min_mean(min_meanSEXP);
    Rcpp::traits::input_parameter< double >::type max_mean(max_meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cost_mat_r(cost_mat_rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type end_vec_r(end_vec_rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean_vec_r(mean_vec_rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type intervals_mat_r(intervals_mat_rSEXP);
    rcpp_result_gen = Rcpp::wrap(fpop_interface2(data, penalty, min_mean, max_mean, cost_mat_r, end_vec_r, mean_vec_r, intervals_mat_r));
    return rcpp_result_gen;
END_RCPP
}
// k_step_bs_r
NumericMatrix k_step_bs_r(std::vector<double> y, int n_steps);
RcppExport SEXP _ChangepointInference_k_step_bs_r(SEXP ySEXP, SEXP n_stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n_steps(n_stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(k_step_bs_r(y, n_steps));
    return rcpp_result_gen;
END_RCPP
}
// fpop_inference_interface_recycle
List fpop_inference_interface_recycle(NumericVector data, double penalty, int window_size, double sig, int return_dev);
RcppExport SEXP _ChangepointInference_fpop_inference_interface_recycle(SEXP dataSEXP, SEXP penaltySEXP, SEXP window_sizeSEXP, SEXP sigSEXP, SEXP return_devSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< int >::type return_dev(return_devSEXP);
    rcpp_result_gen = Rcpp::wrap(fpop_inference_interface_recycle(data, penalty, window_size, sig, return_dev));
    return rcpp_result_gen;
END_RCPP
}
// k_step_bs_inference_r
List k_step_bs_inference_r(std::vector<double> y, int n_steps, int type, double sigma, int window_size, double approximation_threshold, int return_dev);
RcppExport SEXP _ChangepointInference_k_step_bs_inference_r(SEXP ySEXP, SEXP n_stepsSEXP, SEXP typeSEXP, SEXP sigmaSEXP, SEXP window_sizeSEXP, SEXP approximation_thresholdSEXP, SEXP return_devSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n_steps(n_stepsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type approximation_threshold(approximation_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type return_dev(return_devSEXP);
    rcpp_result_gen = Rcpp::wrap(k_step_bs_inference_r(y, n_steps, type, sigma, window_size, approximation_threshold, return_dev));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ChangepointInference_fpop_interface2", (DL_FUNC) &_ChangepointInference_fpop_interface2, 8},
    {"_ChangepointInference_k_step_bs_r", (DL_FUNC) &_ChangepointInference_k_step_bs_r, 2},
    {"_ChangepointInference_fpop_inference_interface_recycle", (DL_FUNC) &_ChangepointInference_fpop_inference_interface_recycle, 5},
    {"_ChangepointInference_k_step_bs_inference_r", (DL_FUNC) &_ChangepointInference_k_step_bs_inference_r, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_ChangepointInference(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
